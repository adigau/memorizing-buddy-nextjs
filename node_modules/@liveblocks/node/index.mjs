import fetch from "node-fetch";
function __awaiter(thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      var value;
      result.done
        ? resolve(result.value)
        : ((value = result.value),
          value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              })).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function authorize(options) {
  return __awaiter(this, void 0, void 0, function* () {
    try {
      const {
        room: room,
        secret: secret,
        userId: userId,
        userInfo: userInfo,
      } = options;
      if (!("string" == typeof room && room.length > 0))
        throw new Error(
          "Invalid room. Please provide a non-empty string as the room. For more information: https://liveblocks.io/docs/api-reference/liveblocks-node#authorize"
        );
      const result = yield fetch(
        options.liveblocksAuthorizeEndpoint ||
          "https://liveblocks.io/api/authorize",
        {
          method: "POST",
          headers: {
            Authorization: `Bearer: ${secret}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            room: room,
            userId: userId,
            userInfo: userInfo,
          }),
        }
      );
      return result.ok
        ? { status: 200, body: yield result.text() }
        : { status: 403, body: yield result.text() };
    } catch (er) {
      return {
        status: 403,
        body: 'Call to "https://liveblocks.io/api/authorize" failed. See "error" for more information.',
        error: er,
      };
    }
  });
}
export { authorize };
