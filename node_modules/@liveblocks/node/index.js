"use strict";
function _interopDefaultLegacy(e) {
  return e && "object" == typeof e && "default" in e ? e : { default: e };
}
Object.defineProperty(exports, "__esModule", { value: !0 });
var fetch__default = _interopDefaultLegacy(require("node-fetch"));
exports.authorize = async function (options) {
  try {
    const {
      room: room,
      secret: secret,
      userId: userId,
      userInfo: userInfo,
    } = options;
    if (!("string" == typeof room && room.length > 0))
      throw new Error(
        "Invalid room. Please provide a non-empty string as the room. For more information: https://liveblocks.io/docs/api-reference/liveblocks-node#authorize"
      );
    const result = await fetch__default.default(
      options.liveblocksAuthorizeEndpoint ||
        "https://liveblocks.io/api/authorize",
      {
        method: "POST",
        headers: {
          Authorization: `Bearer: ${secret}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          room: room,
          userId: userId,
          userInfo: userInfo,
        }),
      }
    );
    return result.ok
      ? { status: 200, body: await result.text() }
      : { status: 403, body: await result.text() };
  } catch (er) {
    return {
      status: 403,
      body: 'Call to "https://liveblocks.io/api/authorize" failed. See "error" for more information.',
      error: er,
    };
  }
};
